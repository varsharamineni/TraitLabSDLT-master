function ok = writeoutput(opt,sampnum)

% ok = writeoutput(opt,append) writes tree
% fields of the output structure opt to the file
% [opt.path opt.file].nex
% and the first four fields of opt.stats (prior, llkd, root rime and mu)
% to [opt.path opt.file].txt
% returns 1 if everything went ok
%  if sampnum given, samp with sampnum is appended to file


if nargin == 1
    sampnum = 0;
end

ok = 1;
if sampnum > 1
    % append
    fid = fopen([opt.path opt.file '.nex'],'a');
else
    % write new
    fid = fopen([opt.path opt.file '.nex'],'w');
end
if fid <= 0
    ok = 0;
    disp([opt.path opt.file '.nex could not be opened to write tree output.'])
end

if ok
    if sampnum <= 1
        % first write the tree file
        % write header
        fprintf(fid,'#NEXUS\n\n[%1.0f samples from mcmc run generated by language trees. File written %s]\n',opt.Nsamp,datestr(clock));
        fprintf(fid,'[For associated parameters and likelihood values see same file with .txt extension]\n\n');
        %  introduce tree block
        fprintf(fid,'BEGIN TREES;\n\n');
        % format tree data so we have a easily writable format
        %convert to character array
        opt.trees = char(opt.trees);
        % make tree name block - each tree is named by its sample number
        if opt.Nsamp>=10000
            frontblock= sprintf('tree   tree%05.0f =  ',1:opt.Nsamp);
        else
            frontblock= sprintf('tree   tree%04.0f  =  ',1:opt.Nsamp);
        end
        frontblock=reshape(frontblock,20,opt.Nsamp)';
    else
        % no header just simple front block
        if opt.Nsamp>=10000
            frontblock= sprintf('tree   tree%05.0f =  ',sampnum);
        else
            frontblock= sprintf('tree   tree%04.0f  =  ',sampnum);
        end
        frontblock=reshape(frontblock,20,1)';
    end
    % write the lot out, terminating each line with a semicolon and an endline (ASCII char 10)
    if sampnum <= 1
        fprintf(fid,'%s',[frontblock opt.trees char(zeros(opt.Nsamp,1)+59) char(zeros(opt.Nsamp,1)+10)]');
    else
        fprintf(fid,'%s',[frontblock opt.trees{sampnum} char(59) char(10)]');
    end
    if sampnum == 0
        fprintf(fid,'\nEND;');
    end
    ok = fclose(fid)==0;
    if ~ok
        disp(['Could not close the tree file ', opt.path, opt.file, '.nex', ' in writeoutput'])
    end

end

% write the tree with number of catastrophes (this does not include the
% times)
% open the file
if ok
    if sampnum > 1
        % append
        fid = fopen([opt.path opt.file 'cat.nex'],'a');
    else
        % write new
        fid = fopen([opt.path opt.file 'cat.nex'],'w');
    end
end

if fid <= 0
    ok = 0;
    disp([opt.path opt.file 'cat.nex could not be opened to write tree output.'])
end

if ok
    if sampnum <= 1
        % first write the tree file
        % write header
        fprintf(fid,'#NEXUS\n\n[%1.0f samples from mcmc run generated by language trees; this file contains trees with the number of catastrophes. File written %s]\n',opt.Nsamp,datestr(clock));
        fprintf(fid,'[For associated parameters and likelihood values see same file with .txt extension]\n');
        fprintf(fid,'[For tree with times see same file without cat in the name]\n\n');
        %  introduce tree block
        fprintf(fid,'BEGIN TREES;\n\n');
        % format tree data so we have a easily writable format
        %convert to character array
        opt.cattrees = char(opt.cattrees);
        % make tree name block - each tree is named by its sample number
        if opt.Nsamp>=10000
            frontblock= sprintf('tree   tree%05.0f =  ',1:opt.Nsamp);
        else
            frontblock= sprintf('tree   tree%04.0f  =  ',1:opt.Nsamp);
        end
        frontblock=reshape(frontblock,20,opt.Nsamp)';
    else
        % no header just simple front block
        if opt.Nsamp>=10000
            frontblock= sprintf('tree   tree%05.0f =  ',sampnum);
        else
            frontblock= sprintf('tree   tree%04.0f  =  ',sampnum);
        end
        frontblock=reshape(frontblock,20,1)';
    end
    % write the lot out, terminating each line with a semicolon and an endline (ASCII char 10)
    if sampnum <= 1
        fprintf(fid,'%s',[frontblock opt.cattrees char(zeros(opt.Nsamp,1)+59) char(zeros(opt.Nsamp,1)+10)]');
    else
        fprintf(fid,'%s',[frontblock opt.cattrees{sampnum} char(59) char(10)]');
    end
    if sampnum == 0
        fprintf(fid,'\nEND;');
    end
    ok = fclose(fid)==0;
    if ~ok
        disp(['Could not close the tree file ', opt.path, opt.file, 'cat.nex', ' in writeoutput'])
    end

end

% write the stats file
% open the file
if ok
    if sampnum > 1
        %append
    fid = fopen([opt.path opt.file '.txt'],'a');
    else
        % write new
           fid = fopen([opt.path opt.file '.txt'],'w');
    end 
    if fid <=0
        ok = 0;
        disp([opt.path opt.file '.txt could not be opened to write stats output.'])
    end
end


%%%%%NOTE: IF YOU MAKE CHANGES HERE MAKE SURE THAT YOU MAKE CORRESPONDING CHANGES IN READOUTPUT.M%%%%%%
if ok
    if sampnum <= 1
        % write header
        fprintf(fid,'[%1.0f samples from mcmc run generated by language trees. File written %s]\n',opt.Nsamp,datestr(clock));
        fprintf(fid,'[For associated trees see same file with .nex extension]\n');
        fprintf(fid,'[    Sample   log prior      integrated llkd   root time           mu           p            lambda       kappa           rho              ncat      log likelihood        beta ]\n'); % Luke 18/01/2014 added '   beta'.
        % convert stats to strings
        %             stats = [ state.logprior; state.loglkd; state.tree(state.root).time; state.mu; state.p; btime; state.lambda];
        sample = sprintf('%10.0f  ',1:opt.Nsamp);
        prior = sprintf('%15.5f  ',opt.stats(1,:));
        llkd = sprintf('%15.5f  ',opt.stats(2,:));
        roottime = sprintf('%11.5f  ',opt.stats(3,:));
        mu = sprintf('%15.9f  ',opt.stats(4,:));
        p = sprintf('%11.9f  ',opt.stats(5,:));
        lambda = sprintf('%15.9f  ',opt.stats(7,:));
        kappa=sprintf('%11.9f  ',opt.stats(8,:));
        %nu=sprintf('%15.9f  ',opt.stats(9,:));
        rho=sprintf('%11.9f  ',opt.stats(9,:));
        ncat=sprintf('%10.0f  ',opt.stats(10,:));
        fullllkd = sprintf('%15.5f  ',opt.stats(11,:));
        beta = sprintf('%15.9f  ',opt.stats(12, :)); % Luke 18/01/2014
        % reshape into writable blocks
        sample = reshape(sample,12,opt.Nsamp)';
        prior = reshape(prior,17,opt.Nsamp)';
        llkd = reshape(llkd,17,opt.Nsamp)';
        roottime = reshape(roottime,13,opt.Nsamp)';
        if numel(mu) ~=17*opt.Nsamp, keyboard; end
        mu = reshape(mu,17,opt.Nsamp)';
        p = reshape(p,13,opt.Nsamp)';
        if numel(lambda) ~=17*opt.Nsamp, keyboard; end
        lambda = reshape(lambda,17,opt.Nsamp)';
        kappa=reshape(kappa,13,opt.Nsamp)';
%         if numel(nu)~=17*opt.Nsamp, keyboard; end
%         nu=reshape(nu,17,opt.Nsamp)';
        if numel(rho)~=13*opt.Nsamp, keyboard; end
        rho=reshape(rho,13,opt.Nsamp)';
        ncat=reshape(ncat,12,opt.Nsamp)';
        fullllkd = reshape(fullllkd,17,opt.Nsamp)';
        if numel(beta) ~= 17*opt.Nsamp, keyboard; end % Luke 19/01/2014
        beta = reshape(beta, 17, opt.Nsamp)'; % Luke 18/01/2014
        lineterm = zeros(opt.Nsamp,1);
    else
        sample = sprintf('%10.0f  ',sampnum);
        prior = sprintf('%15.5f  ',opt.stats(1,sampnum));
        llkd = sprintf('%15.5f  ',opt.stats(2,sampnum));
        roottime = sprintf('%11.5f  ',opt.stats(3,sampnum));
        mu = sprintf('%15.9f  ',opt.stats(4,sampnum));
        p = sprintf('%11.9f  ',opt.stats(5,sampnum));
        lambda = sprintf('%15.9f  ',opt.stats(7,sampnum));
        kappa=sprintf('%11.9f  ',opt.stats(8,sampnum));
        %nu=sprintf('%15.9f  ',opt.stats(9,sampnum));
        rho=sprintf('%11.9f  ',opt.stats(9,sampnum));
        ncat=sprintf('%10.0f  ',opt.stats(10,sampnum));        
        fullllkd = sprintf('%15.5f  ',opt.stats(11,sampnum));
        beta = sprintf('%15.9f  ', opt.stats(12, sampnum)); % Luke 18/01/2014
        lineterm = 0;
    end
    % write it
    fprintf(fid,'%s',[sample prior llkd roottime mu p lambda kappa rho ncat fullllkd beta char(lineterm+10)]'); % Luke 18/01/2014 added reference to beta.
end
% close the file
ok = fclose(fid)==0;
if ~ok
    disp(['Could not close the stats file ', opt.path, opt.file, '.txt', ' in writeoutput'])
    keyboard;
end
